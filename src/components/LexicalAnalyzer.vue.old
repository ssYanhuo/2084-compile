<template>
  <el-card header="词法分析">
    <el-row type="flex" justify="center" gutter="16">
      <el-col>
        <div>
          <div>
            <p>转移方式：</p>
            <el-input
                :rows="10"
                placeholder="用空格分隔的转移方式名（单个字母）"
                v-model="chars"/>
          </div>
          <div>
            <p>转移过程（用e来代替ε）：
              <el-button
                  @click="selectorCount ++"
                  icon="el-icon-plus"
                  type="primary" circle
                  size="mini"
                  style="float: right; margin-right: 4px"/>
              <el-button
                  v-if="selectorCount > 1"
                  @click="selectorCount --"
                  icon="el-icon-minus"
                  type="danger" circle
                  size="mini"
                  style="float: right; margin-right: 16px"/>
            </p>
            <NFA_TransferSelector
                v-for="n in selectorCount"
                :key="n"
                ref="NFA_TransferSelectors"
                @keypress.enter.native="selectorCount ++"/>
          </div>
        </div>

      </el-col>
      <el-col>
        <el-card shadow="never">
          <div id="graph"></div>
        </el-card>
      </el-col>
    </el-row>
    <el-row type="flex" justify="center">
      <el-button type="primary" @click="submit">提交</el-button>
      <el-button type="primary" @click="drawGraph">绘图</el-button>
    </el-row>
  </el-card>
</template>

<script>
import NFA_TransferSelector from "@/components/wiget/NFA_TransferSelector";
import vis from 'vis'
export default {
  name: "LexicalAnalyzer",
  components: {NFA_TransferSelector},
  data: function () {
    return {
      chars: "",
      selectorCount: 1,
    };
  },
  methods: {
    submit() {
      let params = {
        TransferOfNum: 0,
        TransferOneByOne: [],
        NodeOfNum: 0,
      }
      let selectors = this.$refs.NFA_TransferSelectors
      let transferArrows = []
      let transfers = this.chars.split(' ')
      let nodes = new Set()
      selectors.forEach(function (selector) {
        let transferArrow = {}
        transferArrow.start = selector.start
        transferArrow.end = selector.end
        transferArrow.char_ls = selector.char_ls
        transferArrows.push(transferArrow)
        nodes.add(selector.start)
        nodes.add(selector.end)
      })
      params.NodeOfNum = nodes.size
      params.TransferOneByOne = transfers
      params.TransferOfNum = transfers.length
      transferArrows.push({
        start: 0,
        end: 0,
        char_ls: '#'
      })
      let that = this
      that.$axios({
        url: '/api/NFA_def',
        params: params,
        method: "post",
        data: transferArrows,
        paramsSerializer: function (params) {
          return that.$qs.stringify(params, { indices: false })
        }
      })
      .then(function (result) {
        that.drawGraph(nodes, transfers, result.data.PrintResultJSon)
      })
      .catch(function (err){
        alert(err)
      });
    },
    drawGraph: function (ids, transfers, result) {
      let container = document.getElementById("graph")
      console.log(result)
      let nodes = new vis.DataSet([])
      ids.forEach(function (e){
        nodes.add({id: e, label: e})
      })
      let edges = new vis.DataSet([])
      result.forEach(function (steps) {
        let origin = steps[0]
        let nowP = 1
        transfers.forEach(function (transfer){
          for(let i = nowP; i < nowP + origin.length; i ++){
            steps[i].forEach(function (to){
              if (to !== -1)
                edges.add({from: origin[i - nowP], to: to, label: transfer, arrows: {to: {enabled: true}}})
            })
          }
          nowP += origin.length + 1
        })
      })
      let data = {
        nodes: nodes,
        edges: edges
      }
      let options = {}
      new vis.Network(container, data, options)
    },
  }
}
</script>

<style scoped>
.el-row {
  margin-bottom: 20px;
}
</style>